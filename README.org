* personal config file                                                  :TOC_3_gh:
  - [[#emacs-config][emacs config]]
    - [[#normal-config][normal config]]
    - [[#super-save][super save]]
    - [[#theme][theme]]
    - [[#which-key][which key]]
    - [[#dirvish][dirvish]]
    - [[#rich-annotations-in-m-x-menu][rich annotations in M-x menu]]
    - [[#keymap-annotations-in-m-x-menu][keymap annotations in M-x menu]]
    - [[#dashboard][dashboard]]
    - [[#projectile][projectile]]
    - [[#center-mode][center mode]]
    - [[#meow-modal-edit][meow modal edit]]
  - [[#language-support][language support]]
    - [[#company-mode][company mode]]
    - [[#lspce][lspce]]
    - [[#flycheck][flycheck]]
    - [[#auto-pair][auto pair]]
    - [[#org][org]]
    - [[#yasnippet][yasnippet]]
    - [[#markdown][markdown]]
    - [[#scheme][scheme]]
    - [[#rust][rust]]
  - [[#useful-tools][useful tools]]
    - [[#pdf-tools][pdf tools]]
    - [[#f][f]]

** emacs config
*** normal config
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; package vc macrostep
(defmacro eat/pkg (package &optional vc)
  `(unless (package-installed-p ',package)
     (unless (memq ',package package-archive-contents)
       (package-refresh-contents))
     (if ,vc (package-vc-install ,vc)
       (package-install ',package))))




(define-key global-map (kbd "C-z") (make-sparse-keymap))
(global-set-key (kbd "C-z i") 'package-install)

;; remove bars
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; remove ~ files
;; (setq make-backup-files nil)
(setq backup-directory-alist '((".*" . "/tmp/emacs")))
#+end_src

*** super save
#+begin_src elisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil))
#+end_src

*** theme
#+begin_src elisp
(use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t))
#+end_src

*** which key
#+begin_src elisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

*** dirvish
#+begin_src elisp
(use-package dirvish
  :ensure t
  :config
  (dirvish-override-dired-mode))
#+end_src

*** rich annotations in M-x menu
#+begin_src elisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :ensure t
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

*** keymap annotations in M-x menu
#+begin_src elisp
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; orderless in 
;; Optionally use the `orderless' completion style.
(use-package orderless
  :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Configure vertico directory extension.
(use-package vertico-directory
  :after vertico
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
*** dashboard
#+begin_src elisp
;; show dashboard on startup
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-center-content t)
;; show dashboard in emacs client
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
#+end_src
*** projectile
#+begin_src elisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
*** center mode
#+begin_src elisp
(use-package olivetti
  :ensure t
  :config
  (global-set-key (kbd "C-z c") 'olivetti-mode))
#+end_src
*** meow modal edit
#+begin_src elisp
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(require 'meow)
(meow-setup)
(meow-global-mode 1)
#+end_src
** language support
*** company mode
#+begin_src elisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0))
#+end_src

*** lspce
#+begin_src elisp
#+end_src
*** flycheck
#+begin_src elisp
(use-package flycheck
  :ensure t
  :config
  (global-flycheck-mode))

#+end_src

*** auto pair
#+begin_src elisp
(use-package smartparens
  :ensure t)
(require 'smartparens-config)
(smartparens-global-mode t)
#+end_src

*** org
#+begin_src elisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window ;; edit in current window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t ;; do not put two spaces on the left
      org-src-tab-acts-natively t)

(use-package htmlize
  :ensure t)

(use-package ob-async
  :ensure t)

(use-package toc-org
  :ensure t)

(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode))
      ;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
  (warn "toc-org not found"))
    
;; (if (require 'toc-org nil t)
;;    (progn
;;      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      ;; (add-hook 'markdown-mode-hook 'toc-org-mode)
      ;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
;;  (warn "toc-org not found"))

;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (scheme . t)))

(setq org-confirm-babel-evaluate nil)

;; src block indentation / editing / syntax highlighting

(eat/pkg org-yt "https://github.com/TobiasZawada/org-yt")
#+end_src

#+RESULTS:

*** yasnippet
#+begin_src elisp
(use-package yasnippet
  :ensure t)
#+end_src
*** markdown
#+begin_src elisp
(use-package markdown-mode
  :ensure t)
#+end_src
*** scheme
#+begin_src elisp
(use-package geiser
  :ensure t)

(use-package geiser-guile
  :ensure t)

(use-package macrostep-geiser
  :ensure t
  :after geiser-mode
  :config (add-hook 'geiser-mode-hook #'macrostep-geiser-setup))

(use-package macrostep-geiser
  :ensure t
  :after geiser-repl
  :config (add-hook 'geiser-repl-mode-hook #'macrostep-geiser-setup))

(setq geiser-active-implementations '(guile))

(use-package flycheck-guile
  :ensure t)

(require 'flycheck-guile-autoloads)

(eval-after-load 'scheme-mode '(require 'smartparens-scheme))
#+end_src

*** rust
#+begin_src elisp
(use-package rust-mode
  :ensure t)

(use-package flycheck-rust
  :ensure t)
#+end_src
** useful tools
*** pdf tools
#+begin_src elisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install))
#+end_src

*** f
#+begin_src elisp
(use-package f
  :ensure t)
#+end_src
