#+STARTUP: indent
* personal config file                                                  :TOC_3_gh:
  - [[#emacs-config][emacs config]]
    - [[#normal-config][normal config]]
    - [[#useful-functions][useful functions]]
    - [[#super-save][super save]]
    - [[#theme][theme]]
    - [[#which-key][which key]]
    - [[#dirvish][dirvish]]
    - [[#rich-annotations-in-m-x-menu][rich annotations in M-x menu]]
    - [[#keymap-annotations-in-m-x-menu][keymap annotations in M-x menu]]
    - [[#center-mode][center mode]]
    - [[#meow-modal-edit][meow modal edit]]
    - [[#fast-move][fast-move]]
    - [[#prettify-symbols][prettify symbols]]
  - [[#language-support][language support]]
    - [[#company-mode][company mode]]
    - [[#flycheck][flycheck]]
    - [[#rainbow-brackets][rainbow brackets]]
    - [[#auto-pair][auto pair]]
    - [[#auto-format][auto format]]
    - [[#lispy][lispy]]
    - [[#yasnippet][yasnippet]]
    - [[#markdown][markdown]]
    - [[#scheme][scheme]]
    - [[#rust][rust]]
  - [[#note-taking][note taking]]
    - [[#org][org]]
    - [[#org-capture][org-capture]]
    - [[#org-aganda][org-aganda]]
  - [[#useful-tools][useful tools]]
    - [[#f][f]]
    - [[#typit][typit]]
    - [[#magit][magit]]
    - [[#treemacs][treemacs]]
    - [[#beancount][beancount]]
    - [[#leetcode][leetcode]]

** emacs config
*** normal config
#+begin_src elisp
(setq lexical-binding t)
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;; always ensure
(require 'use-package-ensure)
(setq use-package-always-ensure t)
;; (setq use-package-always-defer t)
(setq use-package-inject-hooks t)

(progn
  (set-locale-environment "en_US.UTF-8")
  (setq system-time-locale "C")  ;; 这个是为了在 org mode 中用英文显示日期，默认是中文
  )

(defun font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

(defun nasy-set-font ()
 (cl-loop for font in '("Source Code Pro" "Cascadia Code" "SF Mono"
                         "Fira Code" "Menlo" "Monaco" "Dejavu Sans Mono"
                         "Lucida Console" "Consolas" "SAS Monospace")
           when (font-installed-p font)
           return (set-face-attribute
                   'default nil
                   :font (font-spec :family font
                                    :weight 'normal
                                    :slant 'normal
                                    :size (cond ((eq system-type 'gnu/linux) 18.0)
                                                ((eq system-type 'windows-nt) 16.0)))))
  (cl-loop for font in '("OpenSansEmoji" "Noto Color Emoji" "Segoe UI Emoji"
                         "EmojiOne Color" "Apple Color Emoji" "Symbola" "Symbol")
           when (font-installed-p font)
           return (set-fontset-font t 'unicode
                                    (font-spec :family font
                                               :size (cond ((eq system-type 'gnu/linux) 20.0)
                                                           ((eq system-type 'windows-nt) 18.0)))
                                    nil 'prepend))
  (cl-loop for font in '("Microsoft Yahei UI" "思源黑体 CN" "思源宋体 CN" "微软雅黑 CN"
                         "Source Han Sans CN" "Source Han Serif CN"
                         "WenQuanYi Micro Hei" "文泉驿等宽微米黑"
                         "Microsoft Yahei")
           when (font-installed-p font)
           return (set-fontset-font t '(#x4e00 . #x9fff)
                                    (font-spec :name font
                                               :weight 'normal
                                               :slant 'normal
                                               :size (cond ((eq system-type 'gnu/linux) 20.0)
                                                           ((eq system-type 'windows-nt) 18.0)))))
  (cl-loop for font in '("HanaMinB" "SimSun-ExtB")
           when (font-installed-p font)
           return (set-fontset-font t '(#x20000 . #x2A6DF)
                                    (font-spec :name font
                                               :weight 'normal
                                               :slant 'normal
                                               :size (cond ((eq system-type 'gnu/linux) 20.0)
                                                           ((eq system-type 'windows-nt) 18.0))))))
(when (display-graphic-p)
  (nasy-set-font))
  
(add-hook 'window-setup-hook #'nasy-set-font)
(add-hook 'server-after-make-frame-hook #'nasy-set-font)

;; package vc macrostep
(defmacro eat/pkg (package &optional vc)
  `(unless (package-installed-p ',package)
     (unless (memq ',package package-archive-contents)
       (package-refresh-contents))
     (if ,vc (package-vc-install ,vc)
       (package-install ',package))))


;; (set-frame-parameter nil 'bottom-divider-width 0)
;; remove strike through line in modeline
(setq x-underline-at-descent-line t)

(define-key global-map (kbd "C-z") (make-sparse-keymap))
(global-set-key (kbd "C-z i") 'package-install)

;; remove bars
;; (menu-bar-mode -1)
(tool-bar-mode -1)
;; (scroll-bar-mode -1)

;; remove ~ files
;; (setq make-backup-files nil)
(setq backup-directory-alist '((".*" . "/tmp/emacs")))

;; save place
(save-place-mode 1)

;; auto fill
;; (setq-default auto-fill-function 'do-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; scroll by one line kbd
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+end_src

*** useful functions
#+begin_src elisp
(keymap-global-set "C-x C-a" '(lambda ()
				(interative)
				(eval-region (point-min) (point))))
#+end_src
*** super save
#+begin_src elisp
(use-package super-save
  :init
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil))
#+end_src

*** theme
#+begin_src elisp :eval no
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  :init
  ;; (load-theme 'doom-ayu-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package auto-dark
  :after
  (doom-themes)
  :config
  (setq auto-dark-dark-theme 'doom-ayu-dark)
  (setq auto-dark-light-theme 'doom-ayu-light)
  (auto-dark-mode t))

(define-advice load-theme (:before (&rest args) disable-theme)
  "Disable `custom-enabled-themes' before `load-theme'."
  (mapcar #'disable-theme custom-enabled-themes))
#+end_src

*** which key
#+begin_src elisp
(use-package which-key
  :init
  (which-key-mode))
#+end_src

*** dirvish
#+begin_src elisp
(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :bind ("C-z d" . 'dirvish-dwim))
  ;;(global-set-key (kbd "C-z d") 'dirvish-dwim))
#+end_src

*** rich annotations in M-x menu
#+begin_src elisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

*** keymap annotations in M-x menu
#+begin_src elisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; orderless in 
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Configure vertico directory extension.
(use-package vertico-directory
  :ensure f
  :after vertico
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
*** COMMENT dashboard
#+begin_src elisp
;; show dashboard on startup
(use-package dashboard
  :init
  (dashboard-setup-startup-hook)
  (setq dashboard-center-content t)
  ;; show dashboard in emacs client
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5))))
#+end_src
*** COMMENT projectile
#+begin_src elisp
(use-package projectile
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
*** center mode
#+begin_src elisp
(use-package olivetti
  :bind ("C-z c" . 'olivetti-mode))
#+end_src
*** meow modal edit
#+begin_src elisp
(use-package meow
  :demand t
  :config
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
  (meow-setup)
  (meow-global-mode 1))

#+end_src

*** fast-move
#+begin_src elisp
(use-package avy
  :bind ("C-:" . 'avy-goto-char))
#+end_src

*** prettify symbols
#+begin_src elisp
(setq-default prettify-symbols-alist '(("TODO" . "")
	                               ("WAIT" . "")        
   			       ("NOPE" . "")
				       ("DONE" . "")
				       ("[ ]" . "")
				       ("[X]" . "")
				       ("[-]" . "")
				       ("lambda" . 955)
				       ("#+begin_src" . "→")
				       ("#+end_src" . "←")
				       (":PROPERTIES:" . "")
				       (":END:" . "―")
				       ("#+STARTUP:" . "")
				       ("#+TITLE: " . "")
				       ("#+RESULTS:" . "")
				       ("#+NAME:" . "")
				       ("#+ROAM_TAGS:" . "")
				       ("#+FILETAGS:" . "")
				       ("#+HTML_HEAD:" . "")
				       ("#+SUBTITLE:" . "")
				       ("#+AUTHOR:" . "")
				       (":Effort:" . "")
				       ("SCHEDULED:" . "")
				       ("DEADLINE:" . "")))

(add-hook 'org-mode-hook 'prettify-symbols-mode)
(add-hook 'prog-mode-hook 'prettify-symbols-mode)
#+end_src

** language support
*** company mode
#+begin_src elisp
(use-package company
  :hook ((prog-mode . company-mode)
	 (text-mode . company-mode))
  :custom
  (company-dabbrev-downcase 0)
  (company-idle-delay 0.1 "respond faster"))
#+end_src

*** flycheck
#+begin_src elisp
(use-package flycheck
  :init
  (global-flycheck-mode))

#+end_src

*** COMMENT smartparens
#+begin_src elisp
(use-package smartparens)
(require 'smartparens-config)
(smartparens-global-mode t)
#+end_src

*** rainbow brackets
#+begin_src elisp
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

*** auto pair
#+begin_src elisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

*** auto format
#+begin_src elisp
(use-package format-all)
#+end_src

*** lispy
#+begin_src elisp
(use-package lispy
  :hook (scheme-mode . lispy-mode))
#+end_src

*** yasnippet
#+begin_src elisp
(use-package yasnippet)
#+end_src

*** markdown
#+begin_src elisp
(use-package markdown-mode)
#+end_src
*** scheme
#+begin_src elisp
(use-package geiser
  :mode ("\\.scm\\'" . scheme-mode)
  :config
  (setq geiser-active-implementations '(mit)))

;; (use-package geiser-guile)

(use-package geiser-mit
  :mode ("\\.scm\\'" . scheme-mode))

(use-package macrostep-geiser
  :after geiser-mode
  :hook (geiser-mode-hook #'macrostep-geiser-setup))

(use-package macrostep-geiser
  :after geiser-repl
  :hook (geiser-repl-mode-hook #'macrostep-geiser-setup))

;; (use-package flycheck-guile
;;   :ensure t)

;; (require 'flycheck-guile)

(eval-after-load 'scheme-mode '(require 'smartparens-scheme))
#+end_src

*** COMMENT racket
#+begin_src elisp
(use-package racket-mode
  :hook ('racket-mode-hook . (lambda () (define-key racket-mode-map (kbd "<f5>") 'racket-run))))
;; (eat/pkg ob-racket "https://github.com/hasu/emacs-ob-racket")
(use-package ob-racket
  :ensure nil
  :after org
  :config
  (add-hook 'ob-racket-pre-runtime-library-load-hook
	      #'ob-racket-raco-make-runtime-library))
#+end_src

*** rust
#+begin_src elisp
(use-package rust-mode
  :hook ((rust-mode . (lambda () (setq indent-tabs-mode nil)))))

(use-package flycheck-rust
  :mode ("\\.rs\\'" . rust-mode))

(add-hook 'rust-mode-hook 'eglot-ensure)
#+end_src

*** COMMENT lspce
#+begin_src elisp
(use-package lspce
  :load-path "site-lisp/lspce"
  :config (progn
            (setq lspce-send-changes-idle-time 1)

            ;; You should call this first if you want lspce to write logs
            (lspce-set-log-file "/tmp/lspce.log")

            ;; By default, lspce will not write log out to anywhere. 
            ;; To enable logging, you can add the following line
            ;; (lspce-enable-logging)
            ;; You can enable/disable logging on the fly by calling `lspce-enable-logging' or `lspce-disable-logging'.

            ;; enable lspce in particular buffers
            ;; (add-hook 'rust-mode-hook 'lspce-mode)

            ;; modify `lspce-server-programs' to add or change a lsp server, see document
            ;; of `lspce-lsp-type-function' to understand how to get buffer's lsp type.
            ;; Bellow is what I use
            (setq lspce-server-programs `(("rust"  "rust-analyzer" "" lspce-ra-initializationOptions)
                                          ("python" "pylsp" "" )
                                          ("C" "clangd" "--all-scopes-completion --clang-tidy --enable-config --header-insertion-decorators=0")
					        ("cpp" "clangd" "--all-scopes-completion --clang-tidy --enable-config --header-insertion-decorators=0")
                                          ("java" "java" lspce-jdtls-cmd-args lspce-jdtls-initializationOptions)
                                          ))
            )
  )
#+end_src
** note taking
*** org
#+begin_src elisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window ;; edit in current window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t ;; do not put two spaces on the left
      org-src-tab-acts-natively t)

(use-package htmlize)

(use-package org-download
  :init
  :hook ((dired-mode-hook . org-download-enable)
	 (org-mode . org-download-enable)
	 (org-mode . (lambda ()
		       (setq org-download-screenshot-method "powershell -c Add-Type -AssemblyName System.Windows.Forms;$image = [Windows.Forms.Clipboard]::GetImage();$image.Save('%s', [System.Drawing.Imaging.ImageFormat]::Png)")))))

(use-package ob-async
  :mode ("\\.org\\'" . org-mode))

(use-package toc-org
  :mode ("\\.org\\'" . org-mode))

(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode))
      ;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
  (warn "toc-org not found"))
    
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (scheme . t)))

(setq org-confirm-babel-evaluate nil)

;; src block indentation / editing / syntax highlighting

(eat/pkg org-yt "https://github.com/TobiasZawada/org-yt")

;; latex preview size
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

;; auto indent
(setq org-startup-indented 1)
#+end_src

#+RESULTS:

*** org-capture
#+begin_src elisp
(setq org-default-notes-file (concat org-directory "/journal.org"))
(global-set-key (kbd "C-c c") #'org-capture)
(setq org-capture-templates nil)
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
	("r" "Things to read" entry (file+datetree "~/org/read.org")
         "* %?\nEntered on %U\n  %i\n")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
;; (add-to-list 'org-capture-templates
;;             '("j" "Journal" entry (file "~/org/journal.org")
;;                "* %U - %^{heading}\n  %?"))
#+end_src

*** org-aganda
#+begin_src elisp
(global-set-key (kbd "C-c a") #'org-agenda)
#+end_src
** useful tools
*** COMMENT pdf tools
#+begin_src elisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
#+end_src

*** f
#+begin_src elisp
(use-package f)
#+end_src

*** COMMENT Emms

cannot use on windows

#+begin_src elisp
(use-package emms
  :config
  (require 'emms-setup)
  (emms-all)
  (setq emms-player-list '(emms-player-mpv)
	emms-info-functions '(emms-info-native)))
#+end_src

*** typit
#+begin_src elisp
(use-package typit)
#+end_src

*** magit
#+begin_src elisp
(use-package magit)
(setq magit-view-git-manual-method 'man)
#+end_src

*** treemacs
#+begin_src elisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

*** beancount
#+begin_src elisp
(use-package beancount
  :load-path "site-lisp/beancount-mode"
  :mode ("\\.beancount'" . beancount-mode)
  :hook ((beancount-mode . (lambda () (setq-local electric-indent-chars nil)))
	 (beancount-mode . outline-minor-mode))
  :bind (:map beancount-mode-map
	      ("C-c C-n" . outline-next-visible-heading)
	      ("C-c C-p" . outline-previous-visible-heading)))
(use-package flymake-bean-check
  :load-path "site-lisp/beancount-mode"
  :hook (beancount-mode . flymake-bean-check-enable))
#+end_src

*** leetcode
#+begin_src elisp
(use-package leetcode
  :hook (leetcode-solution-mode . (lambda() (flycheck-mode -1)))
  :config
  (setq leetcode-prefer-language "cpp")
  (setq leetcode-prefer-sql "mysql")
  (setq leetcode-save-solution t)
  (setq leetcode-directory "~/leetcode"))
#+end_src

